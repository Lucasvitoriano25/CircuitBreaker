
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2019 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f0xx_hal.h"

/* USER CODE BEGIN Includes */
#include <math.h>
#include "lcd.h"
/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

TIM_HandleTypeDef htim1;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
CircuitBreak cbs = {IDLE, HUNDREDS, 0, 4095, 0, 0.0, 0.0};

LCD_PortType ports[] = {LCD_D4_GPIO_Port, LCD_D5_GPIO_Port, LCD_D6_GPIO_Port, LCD_D7_GPIO_Port};
LCD_PinType  pins[]  = {LCD_D4_Pin,       LCD_D5_Pin,       LCD_D6_Pin,       LCD_D7_Pin};
LCD_HandleTypeDef lcd;

uint8_t sw_psh_cnt = 0;
uint8_t sw_rls_cnt = 0;
uint32_t last_lcd_update = 0;
float ibat_real;
uint8_t exti_cnt = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC_Init(void);
static void MX_TIM1_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void SW2_PushedHandler();
void SW3_PushedHandler();
void SW4_PushedHandler();
void SW5_PushedHandler();
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */
  // Perform ADC automatic self-calibration
  HAL_ADCEx_Calibration_Start(&hadc);
  
  HAL_Delay(1000);
  
  lcd = LCD_create(ports, pins, LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_E_GPIO_Port, LCD_E_Pin, LCD_4_BIT_MODE);

  LCD_string(&lcd, " CIRCUIT BREAK  ");
  LCD_cursor(&lcd, 1, 0);
  LCD_string(&lcd, "IBat:");
  LCD_cursor(&lcd, 2, 0);
  LCD_string(&lcd, "IBreak:");
  LCD_cursor(&lcd, 3, 0);
  LCD_string(&lcd, "   Booting...   ");
  last_lcd_update = HAL_GetTick();
  
  // Enable ADC DMA circular mode
  HAL_TIM_Base_Start(&htim1);
  HAL_ADC_Start_DMA(&hadc, (uint32_t*) &(cbs.ibat), 2);
  
  // Enable MOSFET ouput
  HAL_GPIO_WritePin(CMD_MOSFET_GPIO_Port, CMD_MOSFET_Pin, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  
  while (1) {
//    switch (cbs.state) {
//      case NORMAL:
//        // Update LCD
//        if (HAL_GetTick() - last_lcd_update > 200) {
//          // Update IBAT float value
//          cbs.ibat_float = cbs.ibat / 62.045;
//          
//          // Update IBAT
//          LCD_cursor(&lcd, 1, 0);
//          LCD_string(&lcd, "IBat:   ");
//          LCD_float(&lcd, cbs.ibat_float, 2);
//          LCD_string(&lcd, " A");
//
//          // Update IBREAK
//          LCD_cursor(&lcd, 2, 0);
//          LCD_string(&lcd, "IBreak: ");
//          LCD_float(&lcd, cbs.ibreak_float, 2);
//          LCD_string(&lcd, " A");
//          
//          // Update last line (state)
//          LCD_cursor(&lcd, 3, 0);
//          LCD_string(&lcd, "                ");
//          
//          // Update last update variable
//          last_lcd_update = HAL_GetTick();
//        }
//      break;
//      
//      case IDLE:
//        // Turn MOSFET off
//        HAL_GPIO_WritePin(CMD_MOSFET_GPIO_Port, CMD_MOSFET_Pin, GPIO_PIN_RESET);
//        
//        // Get SW2 state
//        if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin)) {
//          if (sw_psh_cnt < 3) {
//            if (sw_psh_cnt == 2) {
//              SW2_PushedHandler();
//              sw_rls_cnt = 0;
//            }
//            
//            sw_psh_cnt++;
//          }
//          
//          sw_rls_cnt = 0;
//        } else if (sw_psh_cnt == 3) {
//          if (sw_rls_cnt == 2) {
//            sw_psh_cnt = 0;
//            sw_rls_cnt = 0;
//          } else {
//            sw_rls_cnt++;
//          }
//        } else {
//          sw_psh_cnt = 0;
//        }
//          
//        
//        // Get SW3 state
//        if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin)) {
//          if (sw_psh_cnt < 3) {
//            if (sw_psh_cnt == 2) {
//              SW3_PushedHandler();
//              sw_rls_cnt = 0;
//            }
//            
//            sw_psh_cnt++;
//          }
//          
//          sw_rls_cnt = 0;
//        } else if (sw_psh_cnt == 3) {
//          if (sw_rls_cnt == 2) {
//            sw_psh_cnt = 0;
//            sw_rls_cnt = 0;
//          } else {
//            sw_rls_cnt++;
//          }
//        } else {
//          sw_psh_cnt = 0;
//        }
//        
//        // Get SW4 state
//        if (HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin)) {
//          if (sw_psh_cnt < 3) {
//            if (sw_psh_cnt == 2) {
//              SW4_PushedHandler();
//              sw_rls_cnt = 0;
//            }
//            
//            sw_psh_cnt++;
//          }
//          
//          sw_rls_cnt = 0;
//        } else if (sw_psh_cnt == 3) {
//          if (sw_rls_cnt == 2) {
//            sw_psh_cnt = 0;
//            sw_rls_cnt = 0;
//          } else {
//            sw_rls_cnt++;
//          }
//        } else {
//          sw_psh_cnt = 0;
//        }
//        
//        // Get SW5 state
//        if (HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin)) {
//          if (sw_psh_cnt < 3) {
//            if (sw_psh_cnt == 2) {
//              SW5_PushedHandler();
//              sw_rls_cnt = 0;
//            }
//            
//            sw_psh_cnt++;
//          }
//          
//          sw_rls_cnt = 0;
//        } else if (sw_psh_cnt == 3) {
//          if (sw_rls_cnt == 2) {
//            sw_psh_cnt = 0;
//            sw_rls_cnt = 0;
//          } else {
//            sw_rls_cnt++;
//          }
//        } else {
//          sw_psh_cnt = 0;
//        }
//        
//        // Update LCD
//        if (HAL_GetTick() - last_lcd_update > 200) {
//          // Update IBAT float value
//          cbs.ibat_float = cbs.ibat / 62.045;
//          
//          // Update IBAT
//          LCD_cursor(&lcd, 1, 0);
//          LCD_string(&lcd, "IBat:   ");
//          LCD_float(&lcd, cbs.ibat_float, 2);
//          LCD_string(&lcd, " A");
//
//          // Update IBREAK
//          LCD_cursor(&lcd, 2, 0);
//          LCD_string(&lcd, "IBreak: ");
//          LCD_float(&lcd, cbs.ibreak_float, 2);
//          LCD_string(&lcd, " A");
//          
//          // Update last line (state)
//          LCD_cursor(&lcd, 3, 0);
//          LCD_string(&lcd, "      IDLE      ");
//          
//          // Update cursor's position
//          LCD_cursor(&lcd, 2, 8 + cbs.digit);
//          
//          // Update last update variable
//          last_lcd_update = HAL_GetTick();
//        }
//        
//        // Update ibreak with ibreak_float
//        cbs.ibreak = ((uint16_t) (cbs.ibreak_float*62.045)) & 0x0FFF;
//      break;
//      
//      case BREAK:
//        // Turn MOSFET off
//        HAL_GPIO_WritePin(CMD_MOSFET_GPIO_Port, CMD_MOSFET_Pin, GPIO_PIN_RESET);
//        
//        // Update LCD
//        if (HAL_GetTick() - last_lcd_update > 200) {
//          // Update IBAT float value
//          cbs.ibat_float = cbs.ibat / 62.045;
//          
//          // Update IBAT
//          LCD_cursor(&lcd, 1, 0);
//          LCD_string(&lcd, "IBat:   ");
//          LCD_float(&lcd, cbs.ibat_float, 2);
//          LCD_string(&lcd, " A");
//
//          // Update IBREAK
//          LCD_cursor(&lcd, 2, 0);
//          LCD_string(&lcd, "IBreak: ");
//          LCD_float(&lcd, cbs.ibreak_float, 2);
//          LCD_string(&lcd, " A");
//          
//          // Update last line (state)
//          LCD_cursor(&lcd, 3, 0);
//          LCD_string(&lcd, "    BREAK x(    ");
//          
//          // Update last update variable
//          last_lcd_update = HAL_GetTick();
//        }
//      break;
//    }
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* ADC init function */
static void MX_ADC_Init(void)
{

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc.Init.DMAContinuousRequests = ENABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/* TIM1 init function */
static void MX_TIM1_Init(void)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 3;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 60;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|LCD_RW_Pin|LCD_RS_Pin|CMD_BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CMD_MOSFET_Pin|LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin 
                          |LCD_D4_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA3 SW3_Pin SW4_Pin SW5_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|SW3_Pin|SW4_Pin|SW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : SW2_Pin PB6 PB7 */
  GPIO_InitStruct.Pin = SW2_Pin|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : LED_Pin LCD_RW_Pin LCD_RS_Pin CMD_BUZZER_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_RW_Pin|LCD_RS_Pin|CMD_BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : CMD_MOSFET_Pin LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin 
                           LCD_D4_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = CMD_MOSFET_Pin|LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin 
                          |LCD_D4_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

}

/* USER CODE BEGIN 4 */
void SW2_PushedHandler() {
  switch (cbs.digit) {
    case HUNDREDS:
      if (cbs.ibreak_float >= 100) {
        cbs.ibreak_float -= 100;
      }
    break;
    
    case TENS:
      if (cbs.ibreak_float >= 10) {
        cbs.ibreak_float -= 10;
      }
    break;
    
    case UNITS:
      if (cbs.ibreak_float >= 1) {
        cbs.ibreak_float -= 1;
      }
    break;
    
    case TENTHS:
      if (cbs.ibreak_float >= 0.1) {
        cbs.ibreak_float -= 0.1;
      }
    break;
    
    case HUNDREDTHS:
      if (cbs.ibreak_float >= 0.01) {
        cbs.ibreak_float -= 0.01;
      }
    break;
  }
}

void SW3_PushedHandler() {
  switch (cbs.digit) {
    case HUNDREDS:
      cbs.digit = TENS;
    break;
    
    case TENS:
      cbs.digit = UNITS;
    break;
    
    case UNITS:
      cbs.digit = TENTHS;
    break;
    
    case TENTHS:
      cbs.digit = HUNDREDTHS;
    break;
    
    case HUNDREDTHS:
      cbs.digit = HUNDREDS;
    break;
  }
}

void SW4_PushedHandler() {
  switch (cbs.digit) {
    case HUNDREDS:
      if (cbs.ibreak_float >= 900) {
        cbs.ibreak_float += 100;
      }
    break;
    
    case TENS:
      if (cbs.ibreak_float >= 990) {
        cbs.ibreak_float += 10;
      }
    break;
    
    case UNITS:
      if (cbs.ibreak_float >= 999) {
        cbs.ibreak_float += 1;
      }
    break;
    
    case TENTHS:
      if (cbs.ibreak_float >= 999.9) {
        cbs.ibreak_float += 0.1;
      }
    break;
    
    case HUNDREDTHS:
      if (cbs.ibreak_float >= 999.99) {
        cbs.ibreak_float += 0.01;
      }
    break;
  }
}

void SW5_PushedHandler() {
  switch (cbs.digit) {
    case HUNDREDS:
      cbs.digit = HUNDREDTHS;
    break;
    
    case TENS:
      cbs.digit = HUNDREDS;
    break;
    
    case UNITS:
      cbs.digit = TENS;
    break;
    
    case TENTHS:
      cbs.digit = UNITS;
    break;
    
    case HUNDREDTHS:
      cbs.digit = TENTHS;
    break;
  }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
